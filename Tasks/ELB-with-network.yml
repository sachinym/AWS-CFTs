AWSTemplateFormatVersion: 2010-09-09

Description: |
  In this file following services are created -
    1 vpc(with internet gateway, route table, 2 subnets, and their association)
    1 application load balancer
    3 ec2 instance(same region)
    2 security group - 1 for alb and 1 for all 3 instance
  We can access the servers only through load balancer 
  and each time the balancer is refreshed, server will change randomly.

Resources:
  Myvpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/20
      Tags:
        - Key: Name
          Value: Vpc for alb      

  Mygateway:
    Type: AWS::EC2::InternetGateway
    Properties:  
      Tags:
        - Key: Name
          Value: Ig for alb    

  GatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Mygateway
      VpcId: !Ref Myvpc

  myRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Myvpc
      Tags:
        - Key: Name
          Value: Rt for alb      

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-2a
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref Myvpc
      MapPublicIpOnLaunch: true      
      Tags:
        - Key: Name
          Value: 1st subnet      

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-2b
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref Myvpc
      MapPublicIpOnLaunch: true   
      Tags:
        - Key: Name
          Value: 2nd subnet         

  RouteAndSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myRT
      SubnetId: !Ref PublicSubnet1     

  RouteAndSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myRT
      SubnetId: !Ref PublicSubnet2

  InternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Mygateway

  Ec2key:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: server-key

  SSHforALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ssh securitygroup for application load balancer
      VpcId: !Ref Myvpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0     
      Tags:
        - Key: Name
          Value: ssh for load balancer

  SSHforServers:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ssh securitygroup for instance
      VpcId: !Ref Myvpc
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80    
          SourceSecurityGroupId: !GetAtt SSHforALB.GroupId        
      Tags:
        - Key: Name
          Value: ssh for servers

  Ec2instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09b90e09742640522
      InstanceType: t2.micro
      KeyName: !Ref Ec2key
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref SSHforServers
      Tags:
        - Key: Name
          Value: 1st server        
      UserData:
        !Base64 |
          #!/bin/bash
          yum update -y
          yum install httpd -y
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello world from $(hostname -f)</h1><br><h3>This is the 1st linux machine</h3>" > /var/www/html/index.html
          systemctl restart httpd

  Ec2instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09b90e09742640522
      InstanceType: t2.micro
      KeyName: !Ref Ec2key
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref SSHforServers
      Tags:
        - Key: Name
          Value: 2nd server
      UserData:
        !Base64 |
          #!/bin/bash
          yum update -y
          yum install httpd -y
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello world from $(hostname -f)</h1><br><h3>This is the 2nd linux machine</h3>" > /var/www/html/index.html
          systemctl restart httpd

  Ec2instance3:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09b90e09742640522
      InstanceType: t2.micro
      KeyName: !Ref Ec2key
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref SSHforServers
      Tags:
        - Key: Name
          Value: 3rd server        
      UserData:
        !Base64 |
          #!/bin/bash
          yum update -y
          yum install httpd -y
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello world from $(hostname -f)</h1><br><h3>This is the 3rd linux machine</h3>" > /var/www/html/index.html
          systemctl restart httpd

  LocalBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: LocalLoadBalancer
      Scheme: internet-facing
      SecurityGroups: 
        - !GetAtt SSHforALB.GroupId
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2          
      Type: application

  webservergroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: web-server-group
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      VpcId: !Ref Myvpc
      TargetType: instance
      Targets: 
        - Id: !Ref Ec2instance1
          Port: 80
        - Id: !Ref Ec2instance2
          Port: 80
        - Id: !Ref Ec2instance3
          Port: 80     

  GroupListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref webservergroup
      LoadBalancerArn: !Ref LocalBalancer
      Port: 80
      Protocol: HTTP   

Outputs:
  1stServer:
    Description: '1st linux server'
    Value: !Ref Ec2instance1

  2ndServer:
    Description: '2nd linux server'
    Value: !Ref Ec2instance2

  3rdServer:
    Description: '3rd linux server'
    Value: !Ref Ec2instance3

  ipforserver1:
    Description: 'Ip address of 1st linux server'
    Value: !GetAtt Ec2instance1.PublicIp

  ipforserver2:
    Description: 'Ip address of 2nd linux server'
    Value: !GetAtt Ec2instance2.PublicIp

  ipforserver3:
    Description: 'Ip address of 3rd linux server'
    Value: !GetAtt Ec2instance3.PublicIp

  LoadBalancerDNS:
    Description: 'DNS name of Load Balancer'
    Value: !GetAtt LocalBalancer.DNSName